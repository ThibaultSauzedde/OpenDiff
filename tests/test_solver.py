import pytest
import numpy as np
import numpy.testing as npt
import scipy

import opendiff.solver as solver
from opendiff import set_log_level, log_level


def test_solverPI_1d(macrolib_1d):
    set_log_level(log_level.debug)
    macrolib, x_mesh = macrolib_1d
    ref_eigenvector = np.array([0.02422983, 0.00530779, 0.07209338, 0.01579275, 0.11818324,
                                0.02588911, 0.16136532, 0.03534839, 0.20057686, 0.04393778,
                                0.23485256, 0.05144582, 0.26334835, 0.05768763, 0.28536217,
                                0.06250944, 0.30035136, 0.06579242, 0.30794603, 0.06745558,
                                0.30795833, 0.06745782, 0.30038708, 0.06579893, 0.2854179,
                                0.06251959, 0.26341873, 0.05770044, 0.23493079, 0.05146005,
                                0.20065531, 0.04395203, 0.16143628, 0.03536127, 0.11823968,
                                0.02589934, 0.07212968, 0.01579933, 0.02424235, 0.00531005])
    ref_eigenvalue = 0.5513156
    s = solver.SolverPowerIt(x_mesh, macrolib, -1., -1.)

    s.solve(inner_solver="SparseLU")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="LeastSquaresConjugateGradient")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="BiCGSTAB")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="BiCGSTAB", inner_precond="IncompleteLUT")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="GMRES")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)


def test_solverSlepc_1d(macrolib_1d):
    solver.init_slepc()
    set_log_level(log_level.debug)
    macrolib, x_mesh = macrolib_1d
    ref_eigenvector = np.array([0.02422983, 0.00530779, 0.07209338, 0.01579275, 0.11818324,
                                0.02588911, 0.16136532, 0.03534839, 0.20057686, 0.04393778,
                                0.23485256, 0.05144582, 0.26334835, 0.05768763, 0.28536217,
                                0.06250944, 0.30035136, 0.06579242, 0.30794603, 0.06745558,
                                0.30795833, 0.06745782, 0.30038708, 0.06579893, 0.2854179,
                                0.06251959, 0.26341873, 0.05770044, 0.23493079, 0.05146005,
                                0.20065531, 0.04395203, 0.16143628, 0.03536127, 0.11823968,
                                0.02589934, 0.07212968, 0.01579933, 0.02424235, 0.00531005])
    ref_eigenvalue = 0.5513156
    s = solver.SolverSlepc(x_mesh, macrolib, -1., -1.)
    s.solve()
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    # s.solve(solver="power") not working
    # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    #                         decimal=4)

    s.solve(solver="arnoldi")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    # s.solve(solver="arpack") arpack is missing
    # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    #                         decimal=4)

    s.solve(inner_solver="ibcgs")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)


def test_solverPI_2d(macrolib_2d):
    set_log_level(log_level.debug)
    macrolib, x_mesh, y_mesh = macrolib_2d
    ref_eigenvector = np.array([0.02422983, 0.00530779, 0.07209338, 0.01579275, 0.11818324,
                                0.02588911, 0.16136532, 0.03534839, 0.20057686, 0.04393778,
                                0.23485256, 0.05144582, 0.26334835, 0.05768763, 0.28536217,
                                0.06250944, 0.30035136, 0.06579242, 0.30794603, 0.06745558,
                                0.30795833, 0.06745782, 0.30038708, 0.06579893, 0.2854179,
                                0.06251959, 0.26341873, 0.05770044, 0.23493079, 0.05146005,
                                0.20065531, 0.04395203, 0.16143628, 0.03536127, 0.11823968,
                                0.02589934, 0.07212968, 0.01579933, 0.02424235, 0.00531005])
    ref_eigenvalue = 1.0256107535029826
    ref_eigenvector = np.array([5.49753726e-02, 8.75880817e-03, 1.20925164e-01, 2.83276136e-02, 1.41950548e-01, 3.33027071e-02, 1.33029023e-01, 3.11522596e-02, 7.76608939e-02, 1.24152986e-02, 1.39780270e-01, 3.27394902e-02, 1.49040300e-01, 3.49919208e-02, 1.15718202e-01, 2.90177699e-02, 9.10027179e-03, 3.13795851e-02, 1.20925164e-01, 2.83276136e-02, 1.37532636e-01, 3.22651992e-02, 1.37306862e-01, 3.21473862e-02, 1.49606314e-01, 3.51003837e-02, 1.45687365e-01, 3.41250915e-02, 1.62211807e-01, 3.80625114e-02, 1.56338009e-01, 3.67257707e-02, 1.11966213e-01, 2.80767612e-02, 8.71619236e-03, 2.98846118e-02, 1.41950548e-01, 3.33027071e-02, 1.37306862e-01, 3.21473862e-02, 8.92362199e-02, 1.43118315e-02, 1.46825240e-01, 3.43831225e-02, 1.61133411e-01, 3.78076440e-02, 1.69251670e-01, 3.97370232e-02, 1.64350403e-01, 4.07022206e-02, 9.25407689e-02, 2.37537895e-02, 6.99401867e-03, 2.38228755e-02, 1.33029023e-01, 3.11522596e-02, 1.49606314e-01, 3.51003837e-02, 1.46825240e-01, 3.43831225e-02, 1.55025963e-01, 3.63732499e-02, 1.45026659e-01, 3.39668682e-02, 1.48955870e-01, 3.49892949e-02, 1.25914160e-01, 3.17618854e-02, 1.67882575e-02, 5.66038161e-02, 1.88624572e-03, 1.01098571e-02, 7.76608939e-02, 1.24152986e-02, 1.45687365e-01, 3.41250915e-02, 1.61133411e-01, 3.78076440e-02, 1.45026659e-01, 3.39668682e-02,
                       8.30877753e-02, 1.33478909e-02, 1.19222009e-01, 2.94640723e-02, 8.17230785e-02, 2.09686837e-02, 7.52911710e-03, 2.83752547e-02, 7.38918230e-04, 4.32091706e-03, 1.39780270e-01, 3.27394902e-02, 1.62211807e-01, 3.80625114e-02, 1.69251670e-01, 3.97370232e-02, 1.48955870e-01, 3.49892949e-02, 1.19222009e-01, 2.94640723e-02, 8.24046160e-02, 2.12360275e-02, 1.23344380e-02, 4.12640716e-02, 1.69828834e-03, 9.44950016e-03, 1.90574174e-04, 1.32272876e-03, 1.49040300e-01, 3.49919208e-02, 1.56338009e-01, 3.67257707e-02, 1.64350403e-01, 4.07022206e-02, 1.25914160e-01, 3.17618854e-02, 8.17230785e-02, 2.09686837e-02, 1.23344380e-02, 4.12640716e-02, 2.10996147e-03, 1.15134939e-02, 3.25330844e-04, 2.25390280e-03, 4.02576870e-05, 3.15654157e-04, 1.15718202e-01, 2.90177699e-02, 1.11966213e-01, 2.80767612e-02, 9.25407689e-02, 2.37537895e-02, 1.67882575e-02, 5.66038161e-02, 7.52911710e-03, 2.83752547e-02, 1.69828834e-03, 9.44950016e-03, 3.25330844e-04, 2.25390280e-03, 5.54626262e-05, 4.38022019e-04, 7.44491325e-06, 6.32846652e-05, 9.10027179e-03, 3.13795851e-02, 8.71619236e-03, 2.98846118e-02, 6.99401867e-03, 2.38228755e-02, 1.88624572e-03, 1.01098571e-02, 7.38918230e-04, 4.32091706e-03, 1.90574174e-04, 1.32272876e-03, 4.02576870e-05, 3.15654157e-04, 7.44491325e-06, 6.32846652e-05, 1.06355904e-06, 9.48064546e-06])
    s = solver.SolverPowerIt(x_mesh, y_mesh, macrolib, 1., -1., 1., -1.)

    s.solve(inner_solver="SparseLU")
    # print(s.getEigenValues())
    # print(s.getEigenVectors()[0])
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="LeastSquaresConjugateGradient")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="BiCGSTAB")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="BiCGSTAB", inner_precond="IncompleteLUT")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(inner_solver="GMRES")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)


def test_solverSlepc_2d(macrolib_2d):
    solver.init_slepc()
    set_log_level(log_level.debug)
    macrolib, x_mesh, y_mesh = macrolib_2d
    ref_eigenvector_pi = np.array([5.49753726e-02, 8.75880817e-03, 1.20925164e-01, 2.83276136e-02, 1.41950548e-01, 3.33027071e-02, 1.33029023e-01, 3.11522596e-02, 7.76608939e-02, 1.24152986e-02, 1.39780270e-01, 3.27394902e-02, 1.49040300e-01, 3.49919208e-02, 1.15718202e-01, 2.90177699e-02, 9.10027179e-03, 3.13795851e-02, 1.20925164e-01, 2.83276136e-02, 1.37532636e-01, 3.22651992e-02, 1.37306862e-01, 3.21473862e-02, 1.49606314e-01, 3.51003837e-02, 1.45687365e-01, 3.41250915e-02, 1.62211807e-01, 3.80625114e-02, 1.56338009e-01, 3.67257707e-02, 1.11966213e-01, 2.80767612e-02, 8.71619236e-03, 2.98846118e-02, 1.41950548e-01, 3.33027071e-02, 1.37306862e-01, 3.21473862e-02, 8.92362199e-02, 1.43118315e-02, 1.46825240e-01, 3.43831225e-02, 1.61133411e-01, 3.78076440e-02, 1.69251670e-01, 3.97370232e-02, 1.64350403e-01, 4.07022206e-02, 9.25407689e-02, 2.37537895e-02, 6.99401867e-03, 2.38228755e-02, 1.33029023e-01, 3.11522596e-02, 1.49606314e-01, 3.51003837e-02, 1.46825240e-01, 3.43831225e-02, 1.55025963e-01, 3.63732499e-02, 1.45026659e-01, 3.39668682e-02, 1.48955870e-01, 3.49892949e-02, 1.25914160e-01, 3.17618854e-02, 1.67882575e-02, 5.66038161e-02, 1.88624572e-03, 1.01098571e-02, 7.76608939e-02, 1.24152986e-02, 1.45687365e-01, 3.41250915e-02, 1.61133411e-01, 3.78076440e-02, 1.45026659e-01, 3.39668682e-02,
                       8.30877753e-02, 1.33478909e-02, 1.19222009e-01, 2.94640723e-02, 8.17230785e-02, 2.09686837e-02, 7.52911710e-03, 2.83752547e-02, 7.38918230e-04, 4.32091706e-03, 1.39780270e-01, 3.27394902e-02, 1.62211807e-01, 3.80625114e-02, 1.69251670e-01, 3.97370232e-02, 1.48955870e-01, 3.49892949e-02, 1.19222009e-01, 2.94640723e-02, 8.24046160e-02, 2.12360275e-02, 1.23344380e-02, 4.12640716e-02, 1.69828834e-03, 9.44950016e-03, 1.90574174e-04, 1.32272876e-03, 1.49040300e-01, 3.49919208e-02, 1.56338009e-01, 3.67257707e-02, 1.64350403e-01, 4.07022206e-02, 1.25914160e-01, 3.17618854e-02, 8.17230785e-02, 2.09686837e-02, 1.23344380e-02, 4.12640716e-02, 2.10996147e-03, 1.15134939e-02, 3.25330844e-04, 2.25390280e-03, 4.02576870e-05, 3.15654157e-04, 1.15718202e-01, 2.90177699e-02, 1.11966213e-01, 2.80767612e-02, 9.25407689e-02, 2.37537895e-02, 1.67882575e-02, 5.66038161e-02, 7.52911710e-03, 2.83752547e-02, 1.69828834e-03, 9.44950016e-03, 3.25330844e-04, 2.25390280e-03, 5.54626262e-05, 4.38022019e-04, 7.44491325e-06, 6.32846652e-05, 9.10027179e-03, 3.13795851e-02, 8.71619236e-03, 2.98846118e-02, 6.99401867e-03, 2.38228755e-02, 1.88624572e-03, 1.01098571e-02, 7.38918230e-04, 4.32091706e-03, 1.90574174e-04, 1.32272876e-03, 4.02576870e-05, 3.15654157e-04, 7.44491325e-06, 6.32846652e-05, 1.06355904e-06, 9.48064546e-06])
        
    ref_eigenvector = np.array([5.30287092e-02, 8.44945688e-03, 1.16852669e-01, 2.73770483e-02, 1.38064361e-01, 3.23939902e-02, 1.30691747e-01, 3.06055817e-02, 7.74633912e-02, 1.23837026e-02, 1.41118646e-01, 3.30524152e-02, 1.51150585e-01, 3.54858200e-02, 1.17625813e-01, 2.94946710e-02, 9.24942559e-03, 3.18920980e-02, 1.16852669e-01, 2.73770483e-02, 1.33333060e-01, 3.12833444e-02, 1.34112225e-01, 3.14011794e-02, 1.47804496e-01, 3.46785767e-02, 1.45610423e-01, 3.41067478e-02, 1.63528636e-01, 3.83701674e-02, 1.58335295e-01, 3.71934107e-02, 1.13683033e-01, 2.85059356e-02, 8.84962787e-03, 3.03416325e-02, 1.38064361e-01, 3.23939902e-02, 1.34112225e-01, 3.14011794e-02, 8.79417864e-02, 1.41046131e-02, 1.45997678e-01, 3.41900061e-02, 1.61358240e-01, 3.78597543e-02, 1.70459994e-01, 4.00197181e-02, 1.66146993e-01, 4.11457693e-02, 9.37839303e-02, 2.40704137e-02, 7.08890070e-03, 2.41471203e-02, 1.30691747e-01, 3.06055817e-02, 1.47804496e-01, 3.46785767e-02, 1.45997678e-01, 3.41900061e-02, 1.54774891e-01, 3.63140625e-02, 1.45327384e-01, 3.40369067e-02, 1.49766437e-01, 3.51795053e-02, 1.26939885e-01, 3.20212543e-02, 1.69600174e-02, 5.71779834e-02, 1.90716083e-03, 1.02214444e-02, 7.74633912e-02, 1.23837026e-02, 1.45610423e-01, 3.41067478e-02, 1.61358240e-01, 3.78597543e-02, 1.45327384e-01, 3.40369067e-02,
                               8.33102061e-02, 1.33837082e-02, 1.19645166e-01, 2.95694653e-02, 8.21485306e-02, 2.10782186e-02, 7.57547748e-03, 2.85611827e-02, 7.44172862e-04, 4.35282956e-03, 1.41118646e-01, 3.30524152e-02, 1.63528636e-01, 3.83701674e-02, 1.70459994e-01, 4.00197181e-02, 1.49766437e-01, 3.51795053e-02, 1.19645166e-01, 2.95694653e-02, 8.26082476e-02, 2.12904551e-02, 1.23818468e-02, 4.14233219e-02, 1.70630370e-03, 9.49505280e-03, 1.91609413e-04, 1.33004652e-03, 1.51150585e-01, 3.54858200e-02, 1.58335295e-01, 3.71934107e-02, 1.66146993e-01, 4.11457693e-02, 1.26939885e-01, 3.20212543e-02, 8.21485306e-02, 2.10782186e-02, 1.23818468e-02, 4.14233219e-02, 2.11809300e-03, 1.15579982e-02, 3.26711717e-04, 2.26354012e-03, 4.04460726e-05, 3.17142251e-04, 1.17625813e-01, 2.94946710e-02, 1.13683033e-01, 2.85059356e-02, 9.37839303e-02, 2.40704137e-02, 1.69600174e-02, 5.71779834e-02, 7.57547748e-03, 2.85611827e-02, 1.70630370e-03, 9.49505280e-03, 3.26711717e-04, 2.26354012e-03, 5.56982586e-05, 4.39891321e-04, 7.47789189e-06, 6.35660133e-05, 9.24942559e-03, 3.18920980e-02, 8.84962787e-03, 3.03416325e-02, 7.08890070e-03, 2.41471203e-02, 1.90716083e-03, 1.02214444e-02, 7.44172862e-04, 4.35282956e-03, 1.91609413e-04, 1.33004652e-03, 4.04460726e-05, 3.17142251e-04, 7.47789189e-06, 6.35660133e-05, 1.06827098e-06, 9.52274736e-06])
    # delta_pi = (100*(ref_eigenvector-ref_eigenvector_pi)/ref_eigenvector_pi).reshape((len(y_mesh)-1, len(x_mesh)-1, macrolib.getNbGroups()))
    # print(delta_pi[:, :, 0])
    # print(delta_pi[:, :, 1])

    ref_eigenvalue = 1.0256209309983306 # 1 pcm de diff avec pi
    s = solver.SolverSlepc(x_mesh, y_mesh, macrolib, 1., -1., 1., -1.)
    s.solve()
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    #not convertged enough to get he same results 
    # # s.solve(solver="power") not working
    # # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    # #                         decimal=4)

    # s.solve(solver="arnoldi")
    # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    #                         decimal=4)

    # # s.solve(solver="arpack") arpack is missing
    # # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    # #                         decimal=4)

    # s.solve(inner_solver="ibcgs")
    # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    #                         decimal=4)


def test_solverPI_3d(macrolib_3d):
    set_log_level(log_level.debug)
    macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d
    ref_eigenvector = np.array([0.02422983, 0.00530779, 0.07209338, 0.01579275, 0.11818324,
                                0.02588911, 0.16136532, 0.03534839, 0.20057686, 0.04393778,
                                0.23485256, 0.05144582, 0.26334835, 0.05768763, 0.28536217,
                                0.06250944, 0.30035136, 0.06579242, 0.30794603, 0.06745558,
                                0.30795833, 0.06745782, 0.30038708, 0.06579893, 0.2854179,
                                0.06251959, 0.26341873, 0.05770044, 0.23493079, 0.05146005,
                                0.20065531, 0.04395203, 0.16143628, 0.03536127, 0.11823968,
                                0.02589934, 0.07212968, 0.01579933, 0.02424235, 0.00531005])
    ref_eigenvalue = 1.0014721463239606
    ref_eigenvector = np.array([8.55596325e-03, 2.60007569e-02, 1.21297850e-02, 2.35344897e-03, 7.23793056e-03, 1.31826984e-03, 3.21366894e-03, 6.00769231e-04, 9.07495644e-04, 1.54447894e-04, 1.04937895e-04, 7.96355098e-05, 2.36792652e-05, 1.90384090e-05, 2.02752353e-05, 5.95835719e-05, 2.91681418e-05, 8.00817286e-06, 1.98364328e-02, 5.37669846e-03, 1.47086936e-02, 3.89616631e-03, 6.71586446e-03, 1.66481950e-03, 1.03235344e-03, 3.01055124e-03, 2.24154677e-04, 7.80524864e-04, 7.01810269e-05, 2.32728117e-04, 8.48096087e-05, 2.39188852e-05, 5.70183584e-05, 1.52753958e-05, 2.75921094e-05, 7.23374047e-06, 8.30041470e-03, 2.07163260e-03, 2.45650336e-03, 7.24704856e-03, 9.71487995e-04, 3.12009535e-03, 2.60632778e-04, 1.01587682e-03, 2.37601978e-04, 7.50184178e-05, 1.00581006e-04, 2.79556837e-05, 5.01824287e-05, 1.31374336e-05, 2.81739537e-05, 6.87455867e-06, 5.23574591e-06, 1.43828078e-05, 1.04058633e-03, 3.18508146e-03, 7.08118596e-04, 2.42589468e-03, 7.46471650e-04, 1.61865528e-04, 3.35982804e-04, 6.56317971e-05, 1.37339487e-04, 2.52424301e-05, 4.56373756e-05, 7.70433351e-06, 8.88164678e-06, 6.57926221e-06, 3.85329991e-06, 2.88662014e-06, 1.90504616e-06, 5.79972999e-06, 1.22996734e-03, 3.37957588e-04, 1.05674907e-03, 2.90183244e-04, 6.81852320e-04, 1.78887337e-04, 2.79084480e-04, 7.63049012e-05, 3.51336683e-05, 1.19867734e-04, 8.41748937e-06, 3.42699376e-05, 3.62416832e-06, 1.33728513e-05, 6.52025526e-06, 1.80777901e-06, 6.88056195e-06, 4.85268001e-06, 6.57832472e-04, 1.69929111e-04, 4.79386561e-04, 1.18871493e-04, 1.17937699e-04, 3.45476585e-04, 4.10982858e-05, 1.37589695e-04, 1.49856435e-05, 5.46302642e-05, 2.14363615e-05, 6.68607348e-06, 1.24936958e-05, 3.54557828e-06, 8.07124615e-06, 2.23423363e-06, 6.88056194e-06, 4.85268003e-06, 7.92868642e-05, 2.47598392e-04, 5.92138628e-05, 1.82939473e-04, 3.12473120e-05, 1.12690600e-04, 1.36871810e-05, 5.75502303e-05, 6.90095703e-06, 2.90123379e-05, 5.10216496e-06, 1.78229644e-05, 6.88056189e-06, 4.85268007e-06, 6.88056190e-06, 4.85268006e-06, 6.88056191e-06, 4.85268005e-06, 2.39961073e-05, 8.00971145e-05, 5.37087086e-05, 1.49683979e-05, 4.25414914e-05, 1.12013600e-05, 2.92561932e-05, 8.10087482e-06, 1.30393544e-05, 3.46782110e-06, 3.54532679e-06, 1.04230055e-05, 6.88056189e-06, 4.85268007e-06, 6.88056190e-06, 4.85268006e-06, 6.88056191e-06, 4.85268005e-06, 2.94536626e-05, 8.20364638e-06, 2.71793211e-05, 6.97605496e-06, 1.74332090e-05, 4.24818187e-06, 4.98317090e-06, 1.31974231e-05, 6.88056188e-06, 4.85268010e-06, 6.88056188e-06, 4.85268009e-06, 6.88056190e-06, 4.85268007e-06, 6.88056191e-06, 4.85268006e-06, 6.88056191e-06, 4.85268005e-06, 4.36579469e-02, 1.75389678e-02, 2.94872913e-02, 3.59455427e-02, 1.67748419e-02, 2.06737125e-02, 7.55477901e-03, 9.36145069e-03, 1.84467107e-03, 1.12186981e-03, 2.66469728e-04, 1.96975434e-04, 6.86268384e-05, 5.17998749e-05, 9.60760062e-05, 3.98463338e-05, 5.61339023e-05, 6.53352134e-05, 3.60210183e-02, 4.41241434e-02, 2.63999233e-02, 3.27529805e-02, 1.09393911e-02, 5.83826074e-03, 2.87166597e-03, 2.35813657e-03, 6.30792016e-04, 5.59601829e-04, 2.98419825e-04, 1.38336695e-04, 1.49878242e-04, 1.84650242e-04, 9.81135249e-05, 1.20599436e-04, 4.83250077e-05, 5.73010562e-05, 1.22349117e-02, 6.09477003e-03, 6.88243189e-03, 5.56727559e-03, 2.50014063e-03, 2.11699965e-03, 7.52632596e-04, 6.80540605e-04, 2.21663026e-04, 4.68258235e-04, 9.62404460e-05, 1.95061490e-04, 4.81822862e-05, 9.75484310e-05, 3.86438116e-05, 1.85973021e-05, 1.30484651e-05, 9.15702514e-06, 2.47765344e-03, 1.99152208e-03, 2.95276432e-03, 1.37568369e-03, 1.53031118e-03, 1.88055711e-03, 6.80933723e-04, 8.56055222e-04, 2.62486482e-04, 3.33039055e-04, 7.68830178e-05, 4.38755391e-05, 1.73992765e-05, 1.19851106e-05, 7.14159081e-06, 3.99318976e-06, 4.76806708e-06, 2.56424793e-06, 1.74195785e-03, 2.15828544e-03, 1.67231572e-03, 2.03012078e-03, 1.09216913e-03, 1.35666357e-03, 2.99448041e-04, 6.74346131e-04, 5.21832014e-05, 2.44175662e-04, 1.22592406e-05, 6.64888536e-05, 1.02131369e-05, 2.24698323e-05, 8.05408833e-06, 9.81869185e-06, 6.88056196e-06, 4.85268002e-06, 9.19183429e-04, 1.12568147e-03, 6.83123592e-04, 3.26218066e-04, 3.04684547e-04, 2.42791927e-04, 1.08402960e-04, 9.53741760e-05, 6.65411162e-05, 3.26406542e-05, 3.40484956e-05, 4.33283155e-05, 1.91691685e-05, 2.32062711e-05, 8.88167455e-06, 1.06037220e-05, 6.88056195e-06, 4.85268003e-06, 2.09622871e-04, 1.69617499e-04, 1.40028870e-04, 1.12346998e-04, 1.30568126e-04, 6.19758084e-05, 5.38453358e-05, 1.03587306e-04, 3.13573040e-05, 5.81134148e-05, 1.97880857e-05, 3.48541432e-05, 7.11208916e-06, 4.80628118e-06, 6.88056191e-06, 4.85268007e-06, 6.88056192e-06, 4.85268005e-06, 9.64164262e-05, 3.27957649e-05, 8.42171030e-05, 5.18453227e-05, 7.05076536e-05, 4.28345921e-05, 5.10955633e-05, 6.07086716e-05, 2.09357292e-05, 9.73852291e-06, 8.28899616e-06, 5.90374588e-06, 6.88056190e-06, 4.85268008e-06, 6.88056191e-06, 4.85268007e-06, 6.88056192e-06, 4.85268005e-06, 5.42969543e-05, 6.31222517e-05, 4.47657749e-05, 5.19529832e-05, 2.65744314e-05, 1.15853824e-05, 1.21153778e-05, 8.33245753e-06, 6.88056188e-06, 4.85268011e-06, 6.88056189e-06, 4.85268010e-06, 6.88056190e-06, 4.85268008e-06, 6.88056191e-06, 4.85268006e-06, 6.88056191e-06, 4.85268005e-06, 5.29763231e-01, 1.24133552e-01, 4.14298855e-01, 9.71015710e-02, 2.30663933e-01, 5.52195171e-02, 1.04668995e-01, 2.51807897e-02, 7.81513391e-03, 2.70200601e-02, 8.23578605e-04, 4.77473007e-03, 2.71350175e-04, 1.25810228e-03, 1.13252277e-03, 2.93394654e-04, 5.53417175e-04, 1.37372636e-04, 4.32268733e-01, 1.08082344e-01, 3.15139748e-01, 8.00351098e-02, 3.82518026e-02, 1.24006107e-01, 9.95060916e-03, 4.04273298e-02, 1.45899810e-03, 9.24164702e-03, 3.18254480e-03, 9.43650901e-04, 1.75482685e-03, 4.54186707e-04, 1.12769606e-03, 2.83076019e-04, 4.48156992e-04, 1.12515541e-04, 3.39588496e-02, 1.21889109e-01, 2.62765746e-02, 9.23184557e-02, 5.82512069e-03, 3.31344620e-02, 1.69311932e-03, 1.04368922e-02, 4.53049558e-04, 2.83804162e-03, 2.74779328e-04, 1.15875124e-03, 1.47146292e-04, 5.74938450e-04, 8.98534755e-05, 3.39216807e-04, 4.46896373e-05, 1.57258533e-04, 5.91911023e-03, 2.84983838e-02, 3.07893639e-02, 8.37733421e-03, 1.92137342e-02, 4.84035037e-03, 8.60758480e-03, 2.16728671e-03, 3.21202025e-03, 8.04570571e-04, 2.45546728e-04, 8.84723599e-04, 3.76895134e-05, 2.21950956e-04, 1.55255713e-05, 8.44086727e-05, 2.43465513e-05, 7.55445529e-06, 1.61515252e-02, 4.06540451e-03, 1.75438905e-02, 4.18280969e-03, 1.17286267e-02, 2.83050249e-03, 1.42927598e-03, 4.64045568e-03, 3.69739206e-04, 1.48537103e-03, 7.67918605e-05, 3.97422144e-04, 1.47164344e-04, 4.06361581e-05, 4.81739712e-05, 1.21119554e-05, 6.88056204e-06, 4.85268007e-06, 8.39256397e-03, 2.05148091e-03, 1.85995383e-03, 6.12927454e-03, 1.03631848e-03, 3.72203523e-03, 2.75065993e-04, 1.41038487e-03, 7.08962717e-04, 1.94282713e-04, 3.64375197e-04, 8.97760827e-05, 1.57269642e-04, 3.77947502e-05, 4.15348802e-05, 9.86205592e-06, 6.88056201e-06, 4.85268009e-06, 7.19620887e-04, 2.51227894e-03, 3.26761209e-04, 1.59025867e-03, 1.34462045e-03, 3.66329142e-04, 8.58743001e-04, 2.15811039e-04, 5.26902922e-04, 1.26271925e-04, 2.53724301e-04, 6.11452176e-05, 3.12828740e-05, 9.23299505e-05, 6.88056199e-06, 4.85268012e-06, 6.88056198e-06, 4.85268011e-06, 1.12348074e-03, 2.88085092e-04, 8.68936453e-04, 2.19738919e-04, 7.68937356e-04, 1.83756134e-04, 4.70633073e-04, 1.13757941e-04, 7.46901245e-05, 2.34524043e-04, 2.53978388e-05, 8.62788849e-05, 6.88056197e-06, 4.85268014e-06, 6.88056198e-06, 4.85268012e-06, 6.88056197e-06, 4.85268011e-06, 5.19626300e-04, 1.29050615e-04, 3.91502487e-04, 9.93870928e-05, 8.88951901e-05, 2.82278548e-04, 4.26518828e-05, 1.39303707e-04, 6.88056199e-06, 4.85268020e-06, 6.88056197e-06, 4.85268017e-06, 6.88056196e-06, 4.85268015e-06, 6.88056196e-06, 4.85268013e-06, 6.88056195e-06, 4.85268012e-06, 8.29697615e-02, 1.60902671e-01, 6.45606284e-02, 1.22312262e-01, 3.57122982e-02, 6.87531306e-02, 1.41350611e-02, 2.94421411e-02, 1.60200138e-03, 7.31715484e-03, 2.48144725e-04, 1.48493928e-03, 2.65670391e-04, 6.97672929e-04, 2.98014116e-04, 5.85749287e-04, 1.41509287e-04, 2.96083870e-04, 6.49561101e-02, 1.21714637e-01, 6.60786087e-02, 1.33264014e-02, 1.90177082e-02, 6.22971751e-03, 6.03234525e-03, 2.13421549e-03, 2.06004361e-03, 5.88016669e-04, 8.68258419e-04, 6.09632852e-04, 4.81670267e-04, 3.34736242e-04, 2.77827548e-04, 5.11619349e-04, 1.47090650e-04, 4.75033281e-05, 2.53679343e-02, 1.08525020e-02, 1.84551533e-02, 7.30046380e-03, 9.13939167e-03, 3.19532066e-03, 2.30132135e-03, 5.42871759e-03, 1.17348070e-03, 2.57646611e-03, 6.05627095e-04, 1.27982250e-03, 3.29986583e-04, 1.41632619e-04, 1.29586663e-04, 5.54098366e-05, 3.62051459e-05, 1.42896000e-05, 8.92013848e-03, 3.04680893e-03, 6.31758502e-03, 1.16303816e-02, 4.51105039e-03, 8.38213314e-03, 2.44517445e-03, 4.70344214e-03, 1.47109176e-03, 5.14559195e-04, 4.20191682e-04, 1.73919878e-04, 1.05359601e-04, 4.27820073e-05, 2.62574992e-05, 1.06961180e-05, 6.37730249e-06, 1.50006474e-05, 2.53311303e-03, 5.33435772e-03, 2.55839469e-03, 5.47165163e-03, 2.88537125e-03, 6.45813386e-04, 1.01850626e-03, 3.40180462e-04, 3.32992411e-04, 1.08304860e-04, 9.54614873e-05, 3.21216280e-05, 2.61590729e-05, 2.26562990e-05, 9.63747095e-06, 7.81335399e-06, 6.88056193e-06, 4.85267988e-06, 2.21803469e-03, 6.27325883e-04, 1.33550124e-03, 5.77613109e-04, 1.01632877e-03, 4.05248834e-04, 5.25992098e-04, 2.13933597e-04, 1.55466044e-04, 3.64610641e-04, 6.46796180e-05, 1.70447533e-04, 2.87044935e-05, 7.68647531e-05, 1.65983278e-05, 5.56620531e-06, 6.88056194e-06, 4.85267987e-06, 5.57302130e-04, 2.22464135e-04, 4.60136367e-04, 1.68468623e-04, 3.24170297e-04, 5.88498654e-04, 2.17503481e-04, 4.12171172e-04, 1.19020374e-04, 2.39939826e-04, 4.37854129e-05, 1.16060714e-04, 8.65613356e-06, 3.46582289e-05, 6.88056195e-06, 4.85267988e-06, 6.88056195e-06, 4.85267987e-06, 2.00601632e-04, 3.82237681e-04, 1.81971264e-04, 3.33307598e-04, 2.57508911e-04, 1.15849490e-04, 1.31639494e-04, 1.17095518e-04, 3.40413403e-05, 8.76447006e-05, 1.16203721e-05, 3.42515765e-05, 6.88056197e-06, 4.85267987e-06, 6.88056196e-06, 4.85267987e-06, 6.88056195e-06, 4.85267987e-06, 9.73926518e-05, 2.03324790e-04, 1.09490796e-04, 3.28877802e-05, 5.84024477e-05, 2.27993778e-05, 2.81099083e-05, 1.15072006e-05, 6.88056200e-06, 4.85267987e-06, 6.88056198e-06, 4.85267987e-06, 6.88056197e-06, 4.85267987e-06, 6.88056196e-06, 4.85267987e-06, 6.88056195e-06, 4.85267987e-06, 3.76382052e-02, 9.01771515e-03, 2.67056582e-02, 6.53460526e-03, 1.47626475e-02, 3.64878456e-03, 1.26171859e-03, 4.66741483e-03, 2.35345220e-04, 1.20750852e-03, 1.36626252e-04, 5.48092068e-04, 5.24222722e-04, 1.28983892e-04, 3.82263240e-04, 9.04464766e-05, 1.34218604e-04, 3.25987076e-05, 2.32685614e-02, 5.80561757e-03, 4.12919399e-03, 1.34614981e-02, 1.82549330e-03, 6.69271984e-03, 6.37397797e-04, 2.71665661e-03, 1.63061910e-03, 4.20950394e-04, 1.09006741e-03, 2.61906752e-04, 6.22205212e-04, 1.50189241e-04, 3.20041448e-04, 7.79271726e-05, 3.46470766e-05, 1.08013269e-04, 2.37628956e-03, 8.24735024e-03, 1.25263151e-03, 5.30444241e-03, 5.19734465e-03, 1.40874447e-03, 3.98469254e-03, 1.02171559e-03, 2.47244845e-03, 6.27999516e-04, 1.31648774e-03, 3.36153165e-04, 1.36453307e-04, 4.37589831e-04, 3.19197054e-05, 1.33008867e-04, 5.47856497e-06, 3.03051218e-05, 5.27176118e-03, 1.40547261e-03, 4.60912456e-03, 1.22340756e-03, 4.52460269e-03, 1.14520150e-03, 3.20510708e-03, 8.21359802e-04, 4.05825192e-04, 1.30650494e-03, 1.21554852e-04, 4.75786056e-04, 1.86248125e-05, 1.22344901e-04, 4.25582201e-06, 3.02987307e-05, 1.78973215e-06, 8.64182879e-06, 4.35096723e-04, 1.61243912e-03, 3.92628060e-04, 1.47613536e-03, 3.91416567e-04, 1.39683682e-03, 2.69542173e-04, 9.71275128e-04, 5.67915200e-05, 3.44745307e-04, 1.54449190e-05, 1.11695452e-04, 3.57667659e-06, 3.07640969e-05, 2.26721900e-06, 1.12210283e-05, 6.88056189e-06, 4.85267982e-06, 5.94417398e-05, 3.46416288e-04, 7.37471964e-05, 3.83087721e-04, 2.63574702e-04, 5.53545977e-04, 2.22355537e-04, 4.38631649e-04, 1.08907791e-04, 2.32347372e-04, 3.57997087e-05, 1.14097966e-04, 1.24596306e-05, 4.51325821e-05, 7.21534748e-06, 1.22858949e-05, 6.88056191e-06, 4.85267981e-06, 3.22632331e-05, 1.31950571e-04, 2.06932052e-04, 5.36701081e-05, 2.90487652e-04, 7.39016205e-05, 2.30348522e-04, 5.94532643e-05, 1.25290411e-04, 3.27547556e-05, 1.27069515e-05, 5.01311190e-05, 3.81143115e-06, 1.65193286e-05, 6.88056194e-06, 4.85267980e-06, 6.88056194e-06, 4.85267980e-06, 1.08602204e-04, 2.72446143e-05, 1.35750211e-04, 3.27613196e-05, 1.38174040e-04, 3.38133324e-05, 2.92979738e-05, 9.80458493e-05, 1.21645419e-05, 4.39985346e-05, 3.81847471e-06, 1.64825064e-05, 6.88056197e-06, 4.85267979e-06, 6.88056196e-06, 4.85267979e-06, 6.88056195e-06, 4.85267979e-06, 4.92456650e-05, 1.28103091e-05, 1.53069989e-05, 4.90158593e-05, 1.16533671e-05, 3.94005693e-05, 4.29337605e-06, 1.94544075e-05, 6.88056200e-06, 4.85267978e-06, 6.88056199e-06, 4.85267978e-06, 6.88056198e-06, 4.85267978e-06, 6.88056196e-06, 4.85267979e-06, 6.88056194e-06, 4.85267979e-06, 7.71626592e-03, 1.06911528e-02, 5.56622408e-03, 7.71423108e-03, 4.07700722e-03, 1.30298274e-03, 1.09287135e-03, 6.90310820e-04, 3.48956634e-04, 2.07737129e-04, 1.63983743e-04, 9.71800743e-05, 1.26994489e-04, 1.71934953e-04, 8.51574013e-05, 1.18646820e-04, 3.56517164e-05, 4.82845922e-05, 4.70980862e-03, 6.79347865e-03, 1.51041102e-03, 5.31383602e-03, 8.10271998e-04, 2.73633439e-03, 3.46584140e-04, 1.19517691e-03, 3.67609501e-04, 5.55682882e-04, 2.36866142e-04, 3.32920616e-04, 1.59591850e-04, 9.44225829e-05, 7.01314323e-05, 9.72185882e-05, 1.42043203e-05, 3.92656194e-05, 5.85982137e-04, 2.84243356e-03, 3.26822615e-04, 1.83991579e-03, 8.22522866e-04, 1.38823212e-03, 6.26867154e-04, 1.00307018e-03, 4.54728916e-04, 3.98142228e-04, 2.44103930e-04, 2.12217212e-04, 3.86404603e-05, 1.51149048e-04, 1.06006019e-05, 5.12434158e-05, 2.49305313e-06, 1.18534972e-05, 9.45804486e-04, 8.34631925e-04, 8.28825183e-04, 7.08983702e-04, 8.15904963e-04, 6.56979295e-04, 5.76838343e-04, 4.72166763e-04, 1.01499822e-04, 4.21326743e-04, 3.19313914e-05, 1.61033097e-04, 5.99977638e-06, 4.55478638e-05, 1.79156717e-06, 1.16801208e-05, 1.45264068e-06, 4.93300868e-06, 9.58220983e-05, 4.91410813e-04, 1.95840989e-04, 2.00838159e-04, 1.92472143e-04, 1.90725295e-04, 1.34156981e-04, 1.34167645e-04, 4.30891074e-05, 5.02737257e-05, 5.00258765e-06, 3.72750416e-05, 1.37854332e-06, 1.11174935e-05, 1.62731268e-06, 6.36969686e-06, 6.88056187e-06, 4.85267980e-06, 4.38775767e-05, 5.05705539e-05, 6.84966510e-05, 5.74339386e-05, 1.13995208e-04, 8.15206469e-05, 5.39337308e-05, 1.71670328e-04, 2.62212300e-05, 9.28678659e-05, 9.47348921e-06, 4.24015549e-05, 8.06999552e-06, 6.00194473e-06, 6.07196956e-06, 2.81879880e-06, 6.88056189e-06, 4.85267979e-06, 2.82801909e-05, 2.12045043e-05, 4.68463632e-05, 6.76788089e-05, 6.25612535e-05, 8.87332859e-05, 4.83175987e-05, 7.45385444e-05, 2.68660036e-05, 4.30466852e-05, 6.47958942e-06, 2.15288421e-05, 4.26925783e-06, 9.62163882e-06, 6.88056192e-06, 4.85267978e-06, 6.88056191e-06, 4.85267978e-06, 2.44870086e-05, 3.48753111e-05, 2.98776709e-05, 4.29753939e-05, 3.05392756e-05, 4.48112339e-05, 1.28329070e-05, 3.84892941e-05, 7.12975445e-06, 1.99602829e-05, 4.42932361e-06, 1.03219570e-05, 6.88056194e-06, 4.85267977e-06, 6.88056193e-06, 4.85267978e-06, 6.88056192e-06, 4.85267978e-06, 1.26860635e-05, 1.72973398e-05, 6.45157193e-06, 1.81525667e-05, 5.46820313e-06, 1.55931947e-05, 3.71423603e-06, 9.89778087e-06, 6.88056196e-06, 4.85267976e-06, 6.88056195e-06, 4.85267976e-06, 6.88056194e-06, 4.85267977e-06, 6.88056193e-06, 4.85267977e-06, 6.88056192e-06, 4.85267977e-06, 3.76048062e-03, 4.69387873e-03, 2.78827448e-03, 3.40145441e-03, 1.91856910e-03, 1.10011096e-03, 7.21783455e-04, 4.66484160e-04, 2.67711427e-04, 1.79191669e-04, 1.22134702e-04, 8.67978024e-05, 7.69858747e-05, 7.93171170e-05, 4.68742698e-05, 5.49762261e-05, 1.87121560e-05, 2.15092992e-05, 2.26901501e-03, 3.14447273e-03, 1.18564508e-03, 2.42089982e-03, 6.93489751e-04, 1.29838796e-03, 3.23420388e-04, 6.21284266e-04, 2.05657291e-04, 2.97707852e-04, 1.24067031e-04, 1.60950192e-04, 7.67233038e-05, 6.65225072e-05, 3.74269890e-05, 4.46523951e-05, 1.08002114e-05, 1.70913095e-05, 2.60831394e-04, 1.19092054e-03, 1.57042536e-04, 7.95061672e-04, 1.81932565e-04, 7.30385644e-04, 1.28344539e-04, 5.09378749e-04, 8.71914206e-05, 3.06847851e-04, 4.77578655e-05, 1.66217244e-04, 1.35997017e-05, 6.10940986e-05, 4.82438657e-06, 2.24281675e-05, 1.36625270e-06, 6.30267954e-06, 1.65314519e-04, 6.06667936e-04, 1.43570278e-04, 5.20809837e-04, 1.39418294e-04, 4.91609066e-04, 9.82162373e-05, 3.48080142e-04, 2.67452291e-05, 1.42583936e-04, 9.35230039e-06, 5.47449251e-05, 2.38159003e-06, 1.62353639e-05, 8.62651881e-07, 5.49113078e-06, 1.11436830e-06, 3.90081917e-06, 2.87216899e-05, 1.65030834e-04, 4.23173590e-05, 1.66380725e-04, 4.25344365e-05, 1.62877234e-04, 2.96250207e-05, 1.15927904e-04, 1.05126599e-05, 4.57474601e-05, 2.39247580e-06, 1.54329252e-05, 8.61172514e-07, 5.19545855e-06, 1.42113263e-06, 5.02351383e-06, 6.88056186e-06, 4.85267980e-06, 1.18328529e-05, 4.75091538e-05, 3.57662433e-05, 5.25540230e-05, 4.97247406e-05, 6.16613208e-05, 3.03684919e-05, 7.59539295e-05, 1.52012096e-05, 4.41639093e-05, 6.21956088e-06, 2.04027622e-05, 4.39262911e-06, 5.79568163e-06, 4.77190398e-06, 3.54910265e-06, 6.88056188e-06, 4.85267979e-06, 1.66636642e-05, 1.98964294e-05, 2.60597171e-05, 3.39359883e-05, 3.24669994e-05, 4.19790154e-05, 2.46702398e-05, 3.88741873e-05, 1.42096727e-05, 2.40729304e-05, 5.74067388e-06, 1.24331894e-05, 4.82615893e-06, 5.68179372e-06, 6.88056191e-06, 4.85267978e-06, 6.88056190e-06, 4.85267978e-06, 1.36287979e-05, 1.69627988e-05, 1.62195363e-05, 2.10137861e-05, 1.66877742e-05, 2.25163776e-05, 1.03239908e-05, 1.94381106e-05, 6.74099381e-06, 1.10537614e-05, 5.10400930e-06, 6.34250459e-06, 6.88056193e-06, 4.85267977e-06, 6.88056192e-06, 4.85267977e-06, 6.88056191e-06, 4.85267977e-06, 6.39728815e-06, 7.62520837e-06, 5.04151231e-06, 8.20655056e-06, 4.60333387e-06, 7.63162327e-06, 4.01481727e-06, 5.71752813e-06, 6.88056195e-06, 4.85267976e-06, 6.88056194e-06, 4.85267976e-06, 6.88056193e-06, 4.85267977e-06, 6.88056192e-06, 4.85267977e-06, 6.88056191e-06, 4.85267977e-06])
    s = solver.SolverPowerIt(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
    print(s.getVolumes())
    s.solve(inner_solver="SparseLU")
    # np.set_printoptions(threshold=100000, edgeitems=10, linewidth=140)
    # print(s.getEigenValues())
    # print(s.getEigenVectors()[0])
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    # s.solve(inner_solver="LeastSquaresConjugateGradient")
    # print(s.getEigenValues()[0])
    # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    # npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
    #                         decimal=4)

    # s.solve(inner_solver="BiCGSTAB", outer_max_iter=1000)
    # assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)


    s.solve(inner_solver="BiCGSTAB", inner_precond="IncompleteLUT")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)

    s.solve(inner_solver="GMRES")
    assert 1.00146 == pytest.approx(s.getEigenValues()[0], abs=1e-5)

def test_solverSlepc_3d(macrolib_3d):
    solver.init_slepc()
    set_log_level(log_level.debug)
    macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d
    ref_eigenvector = np.array([-8.55933233e-03, -2.60109970e-02, -1.21345518e-02, -2.35437445e-03, -7.24072305e-03, -1.31877993e-03, -3.21480898e-03, -6.00983656e-04, -9.07668876e-04, -1.54476085e-04, -1.04783610e-04, -7.94949331e-05, -2.30408707e-05, -1.84996248e-05, -1.85574170e-05, -5.45863283e-05, -2.59246895e-05, -7.13262082e-06, -1.98442475e-02, -5.37881723e-03, -1.47145230e-02, -3.89770735e-03, -6.71850567e-03, -1.66547029e-03, -1.03272273e-03, -3.01160108e-03, -2.24102631e-04, -7.80354764e-04, -6.96092226e-05, -2.31133096e-04, -8.19502382e-05, -2.31605875e-05, -5.29719365e-05, -1.41881549e-05, -2.48926399e-05, -6.52684194e-06, -8.30355667e-03, -2.07241328e-03, -2.45742901e-03, -7.24974973e-03, -9.71818926e-04, -3.12115879e-03, -2.60670852e-04, -1.01608874e-03, -2.37367267e-04, -7.49578236e-05, -9.98725864e-05, -2.77586601e-05, -4.87442178e-05, -1.27625025e-05, -2.63306947e-05, -6.41990928e-06, -4.70927658e-06, -1.28267893e-05, -1.04085970e-03, -3.18590820e-03, -7.08217388e-04, -2.42632620e-03, -7.46475299e-04, -1.61873142e-04, -3.35917347e-04, -6.56203328e-05, -1.37225407e-04, -2.52198206e-05, -4.54129676e-05, -7.66372857e-06, -8.63820699e-06, -6.37669015e-06, -3.27855919e-06, -2.43932421e-06, -7.82312047e-07, -2.58495635e-06, -1.22963439e-03, -3.37879491e-04, -1.05646089e-03, -2.90114017e-04, -6.81616439e-04, -1.78825102e-04, -2.78905587e-04, -7.62537972e-05, -3.50760468e-05, -1.19614715e-04, -8.22646530e-06, -3.35769800e-05, -2.97123833e-06, -1.13827053e-05, -2.69823384e-06, -7.95968251e-07, 4.48008487e-11, 4.28388808e-11, -6.57407604e-04, -1.69819554e-04, -4.79092544e-04, -1.18797572e-04, -1.17861757e-04, -3.45230984e-04, -4.10250168e-05, -1.37309597e-04, -1.47680481e-05, -5.39364140e-05, -1.98583363e-05, -6.22670421e-06, -8.34876178e-06, -2.39664481e-06, -2.31264022e-06, -6.32000341e-07, 4.47567197e-11, 4.28401320e-11, -7.92099445e-05, -2.47339978e-04, -5.91256899e-05, -1.82666451e-04, -3.11278701e-05, -1.12311313e-04, -1.35050013e-05, -5.68870482e-05, -6.47860060e-06, -2.74742416e-05, -3.82328338e-06, -1.35370665e-05, 4.45675820e-11, 4.28382604e-11, 4.45918379e-11, 4.28399307e-11, 4.46573975e-11, 4.28409652e-11, -2.38879483e-05, -7.97867041e-05, -5.33282663e-05, -1.48735699e-05, -4.19407162e-05, -1.10549850e-05, -2.78984771e-05, -7.73582160e-06, -9.55187225e-06, -2.54149724e-06, -1.28472040e-06, -3.94285415e-06, 4.45492803e-11, 4.28379474e-11, 4.45644272e-11, 4.28402296e-11, 4.46045146e-11, 4.28406723e-11, -2.91948554e-05, -8.13630072e-06, -2.68346948e-05, -6.89029358e-06, -1.68706051e-05, -4.09353490e-06, -3.83842377e-06, -9.99895518e-06, 4.45213748e-11, 4.28227778e-11, 4.45244988e-11, 4.28303787e-11, 4.45212285e-11, 4.28362466e-11, 4.45589399e-11, 4.28390885e-11, 4.45895127e-11, 4.28396590e-11, -4.36751414e-02, -1.75458696e-02, -2.94988577e-02, -3.59596402e-02, -1.67813347e-02, -2.06817157e-02, -7.55757348e-03, -9.36492037e-03, -1.84516744e-03, -1.12216337e-03, -2.65846275e-04, -1.96490108e-04, -6.62805325e-05, -5.00872752e-05, -8.71995485e-05, -3.63270430e-05, -4.98894743e-05, -5.81022475e-05, -3.60351944e-02, -4.41415043e-02, -2.64103193e-02, -3.27658654e-02, -1.09436686e-02, -5.84051572e-03, -2.87267508e-03, -2.35894440e-03, -6.30508553e-04, -5.59389007e-04, -2.95763938e-04, -1.37245797e-04, -1.44793663e-04, -1.78393612e-04, -9.08870858e-05, -1.11817794e-04, -4.35516727e-05, -5.16855097e-05, -1.22395602e-02, -6.09708460e-03, -6.88497503e-03, -5.56931997e-03, -2.50091987e-03, -2.11764868e-03, -7.52730408e-04, -6.80629751e-04, -2.21441020e-04, -4.67771728e-04, -9.55322482e-05, -1.93563657e-04, -4.67673941e-05, -9.46921536e-05, -3.60360610e-05, -1.73526768e-05, -1.16690022e-05, -8.20685823e-06, -2.47819057e-03, -1.99195423e-03, -2.95308201e-03, -1.37587651e-03, -1.53019434e-03, -1.88042464e-03, -6.80700397e-04, -8.55764602e-04, -2.62236976e-04, -3.32719196e-04, -7.66135143e-05, -4.37150366e-05, -1.69515665e-05, -1.16885470e-05, -6.20858737e-06, -3.53434152e-06, -2.68940542e-06, -1.30612797e-06, -1.74141458e-03, -2.15764039e-03, -1.67186901e-03, -2.02958927e-03, -1.09177297e-03, -1.35617956e-03, -2.99270218e-04, -6.73955683e-04, -5.20908344e-05, -2.43717646e-04, -1.20389241e-05, -6.55464817e-05, -9.36441372e-06, -2.01929981e-05, -4.59339969e-06, -5.67640951e-06, 4.48234171e-11, 4.28383311e-11, -9.18567608e-04, -1.12494126e-03, -6.82734579e-04, -3.26045573e-04, -3.04450855e-04, -2.42614383e-04, -1.08155933e-04, -9.51727174e-05, -6.59014393e-05, -3.23012377e-05, -3.25228638e-05, -4.14153768e-05, -1.55303272e-05, -1.88159612e-05, -3.84421087e-06, -4.59472347e-06, 4.47712002e-11, 4.28391351e-11, -2.09367353e-04, -1.69418561e-04, -1.39776414e-04, -1.12158903e-04, -1.30097717e-04, -6.17619582e-05, -5.34098729e-05, -1.02617190e-04, -3.06628298e-05, -5.62987194e-05, -1.82819023e-05, -3.04398972e-05, -1.35764879e-07, -3.34955816e-07, 4.46083645e-11, 4.28391148e-11, 4.46830319e-11, 4.28398413e-11, -9.59740027e-05, -3.26582974e-05, -8.36844866e-05, -5.15283153e-05, -6.97903493e-05, -4.24083793e-05, -4.97144743e-05, -5.90894794e-05, -1.73502484e-05, -8.68252204e-06, -4.67007470e-06, -3.44721808e-06, 4.45626438e-11, 4.28367894e-11, 4.45881944e-11, 4.28392933e-11, 4.46383405e-11, 4.28395353e-11, -5.38876691e-05, -6.26493586e-05, -4.43272476e-05, -5.14504639e-05, -2.59603293e-05, -1.13855888e-05, -1.02754931e-05, -7.10516973e-06, 4.45225449e-11, 4.28191829e-11, 4.45475850e-11, 4.28273519e-11, 4.45524484e-11, 4.28340915e-11, 4.45956630e-11, 4.28375473e-11, 4.46332173e-11, 4.28377086e-11, -5.29971466e-01, -1.24182266e-01, -4.14461266e-01, -9.71395786e-02, -2.30753401e-01, -5.52408952e-02, -1.04708468e-01, -2.51902281e-02, -7.81764958e-03, -2.70271274e-02, -8.20563548e-04, -4.76202889e-03, -2.58737369e-04, -1.21500060e-03, -1.02466277e-03, -2.66409350e-04, -4.91152192e-04, -1.21988564e-04, -4.32438843e-01, -1.08124804e-01, -3.15263356e-01, -8.00664469e-02, -3.82665635e-02, -1.24053581e-01, -9.95410507e-03, -4.04410568e-02, -1.45713867e-03, -9.23701554e-03, -3.15157307e-03, -9.35760721e-04, -1.69381028e-03, -4.38580466e-04, -1.04120715e-03, -2.61537670e-04, -4.03134399e-04, -1.01272121e-04, -3.39719081e-02, -1.21935366e-01, -2.62860214e-02, -9.23516143e-02, -5.82633486e-03, -3.31436189e-02, -1.69298070e-03, -1.04375481e-02, -4.52382714e-04, -2.83485532e-03, -2.72173569e-04, -1.14889704e-03, -1.42263793e-04, -5.57186253e-04, -8.32646683e-05, -3.15788015e-04, -4.01431622e-05, -1.41925064e-04, -5.91960045e-03, -2.85033593e-02, -3.07916077e-02, -8.37821562e-03, -1.92109936e-02, -4.83978251e-03, -8.60370060e-03, -2.16633814e-03, -3.20861780e-03, -8.03693233e-04, -2.44984592e-04, -8.81806775e-04, -3.68342718e-05, -2.17484949e-04, -1.39543280e-05, -7.76769691e-05, -1.91440638e-05, -6.12389652e-06, -1.61453593e-02, -4.06402233e-03, -1.75391218e-02, -4.18167673e-03, -1.17240807e-02, -2.82939911e-03, -1.42856119e-03, -4.63786661e-03, -3.69053473e-04, -1.48286542e-03, -7.59419430e-05, -3.94416381e-04, -1.41892062e-04, -3.93312645e-05, -4.13811316e-05, -1.04150774e-05, 4.51228218e-11, 4.28157892e-11, -8.38653076e-03, -2.05002334e-03, -1.85909922e-03, -6.12624306e-03, -1.03554494e-03, -3.71923054e-03, -2.74221630e-04, -1.40740409e-03, -7.04068569e-04, -1.93086441e-04, -3.58499992e-04, -8.83724208e-05, -1.50614834e-04, -3.61650899e-05, -3.37574109e-05, -7.93307607e-06, 4.51416635e-11, 4.28163278e-11, -7.18731553e-04, -2.50911814e-03, -3.25971491e-04, -1.58739658e-03, -1.33988645e-03, -3.65170316e-04, -8.53089056e-04, -2.14460406e-04, -5.20666288e-04, -1.24752188e-04, -2.47730019e-04, -5.96077174e-05, -2.84103856e-05, -8.32413029e-05, 4.51650578e-11, 4.28120967e-11, 4.51716834e-11, 4.28168275e-11, -1.11821250e-03, -2.86827218e-04, -8.64019502e-04, -2.18564163e-04, -7.63944550e-04, -1.82568898e-04, -4.65793876e-04, -1.12535156e-04, -7.26272409e-05, -2.27428884e-04, -2.28548464e-05, -7.78175232e-05, 4.51579950e-11, 4.27994785e-11, 4.51836059e-11, 4.28122942e-11, 4.51844220e-11, 4.28153492e-11, -5.16134568e-04, -1.28189480e-04, -3.88645195e-04, -9.86636909e-05, -8.81954098e-05, -2.79879916e-04, -4.12128817e-05, -1.34621622e-04, 4.50557214e-11, 4.27516268e-11, 4.51006843e-11, 4.27718807e-11, 4.51535873e-11, 4.27955679e-11, 4.51785522e-11, 4.28082842e-11, 4.51815706e-11, 4.28120894e-11, -8.27029977e-02, -1.60389685e-01, -6.43709863e-02, -1.21949713e-01, -3.55975482e-02, -6.85333278e-02, -1.41217102e-02, -2.93693031e-02, -1.58824511e-03, -7.25890855e-03, -2.31253496e-04, -1.41107546e-03, -2.02176514e-04, -5.71774425e-04, -2.33488955e-04, -4.61118604e-04, -1.11444307e-04, -2.33229270e-04, -6.47962984e-02, -1.21411302e-01, -6.59934546e-02, -1.32936261e-02, -1.89341221e-02, -6.20322169e-03, -5.95732047e-03, -2.10902039e-03, -1.91818272e-03, -5.62026748e-04, -7.78286640e-04, -5.47863554e-04, -4.09584234e-04, -2.84699606e-04, -2.27138363e-04, -4.18148018e-04, -1.21970867e-04, -3.83127141e-05, -2.52563552e-02, -1.08081506e-02, -1.83391426e-02, -7.25463098e-03, -8.84470895e-03, -3.12067376e-03, -2.11647688e-03, -5.08986552e-03, -1.02311772e-03, -2.29823810e-03, -5.05743280e-04, -1.09434548e-03, -2.75960521e-04, -1.19244870e-04, -1.06006586e-04, -4.55669655e-05, -2.98369835e-05, -1.17759591e-05, -8.71550546e-03, -2.99605608e-03, -6.18647721e-03, -1.13892057e-02, -4.33919854e-03, -8.06717759e-03, -2.29346235e-03, -4.41822519e-03, -1.37259253e-03, -4.73016511e-04, -3.74651909e-04, -1.55077205e-04, -9.12214496e-05, -3.72018418e-05, -2.15616434e-05, -8.79327977e-06, -4.36973239e-06, -9.62813471e-06, -2.51550983e-03, -5.27143685e-03, -2.54095943e-03, -5.39920673e-03, -2.83371981e-03, -6.27879580e-04, -9.73270755e-04, -3.24732228e-04, -
                               3.15223960e-04, -1.02522454e-04, -8.80921948e-05, -2.97045448e-05, -2.43284911e-05, -2.05127202e-05, -7.16630813e-06, -5.44972984e-06, 4.56600035e-11, 4.28312915e-11, -2.20732910e-03, -6.22684448e-04, -1.31993694e-03, -5.70744744e-04, -9.84165173e-04, -3.93093559e-04, -4.95294764e-04, -2.02260306e-04, -1.48394915e-04, -3.43135489e-04, -6.16682036e-05, -1.58991186e-04, -2.60098651e-05, -6.84146537e-05, -9.84163720e-06, -3.40397541e-06, 4.56751355e-11, 4.28317709e-11, -5.50481677e-04, -2.19754916e-04, -4.43039767e-04, -1.63820185e-04, -3.09604787e-04, -5.62227276e-04, -2.04941068e-04, -3.88458903e-04, -1.11485407e-04, -2.24660429e-04, -4.16578517e-05, -1.08060913e-04, -6.26713270e-06, -2.61863202e-05, 4.57008637e-11, 4.28302125e-11, 4.56971643e-11, 4.28311642e-11, -1.95146609e-04, -3.71809327e-04, -1.74581037e-04, -3.20057567e-04, -2.45400015e-04, -1.10341272e-04, -1.26990476e-04, -1.07315053e-04, -3.06386938e-05, -7.87837608e-05, -8.26440235e-06, -2.66449591e-05, 4.57004687e-11, 4.28255643e-11, 4.57173081e-11, 4.28293640e-11, 4.57082049e-11, 4.28300061e-11, -9.44932769e-05, -1.97291595e-04, -1.06483330e-04, -3.16972629e-05, -5.57978431e-05, -2.17795388e-05, -2.50793382e-05, -1.02333088e-05, 4.56447333e-11, 4.28074149e-11, 4.56693098e-11, 4.28150144e-11, 4.56973210e-11, 4.28230968e-11, 4.57080747e-11, 4.28272897e-11, 4.57003789e-11, 4.28274796e-11, -3.69223311e-02, -8.84997444e-03, -2.61951811e-02, -6.41263700e-03, -1.44568945e-02, -3.57423290e-03, -1.23422140e-03, -4.55830163e-03, -2.14992374e-04, -1.12573709e-03, -1.09103092e-04, -4.51538189e-04, -3.73648639e-04, -9.27685220e-05, -2.56820317e-04, -6.09602184e-05, -8.81737599e-05, -2.15063676e-05, -2.28351754e-02, -5.69981941e-03, -4.05732053e-03, -1.32139350e-02, -1.76898199e-03, -6.49083569e-03, -5.86109181e-04, -2.53833926e-03, -1.40688570e-03, -3.66194141e-04, -8.83055841e-04, -2.12550378e-04, -4.66805576e-04, -1.13040945e-04, -2.24189515e-04, -5.47959159e-05, -2.39983725e-05, -7.48771375e-05, -2.32016297e-03, -8.04797809e-03, -1.19508417e-03, -5.09770538e-03, -4.79653808e-03, -1.30594022e-03, -3.53908902e-03, -9.09732068e-04, -2.10800253e-03, -5.36285797e-04, -1.07416682e-03, -2.74643301e-04, -1.08462872e-04, -3.47671267e-04, -2.33479355e-05, -9.91480658e-05, -3.87261293e-06, -2.15470889e-05, -4.99727132e-03, -1.33506661e-03, -4.29568746e-03, -1.14295293e-03, -4.11158345e-03, -1.04190112e-03, -2.83544260e-03, -7.27320194e-04, -3.53856268e-04, -1.13852963e-03, -1.01014251e-04, -3.98917676e-04, -1.51354125e-05, -9.96121153e-05, -3.09558192e-06, -2.25577606e-05, -5.51859656e-07, -3.84875689e-06, -4.13194161e-04, -1.53198223e-03, -3.67316576e-04, -1.38295864e-03, -3.57931033e-04, -1.27821896e-03, -2.40040890e-04, -8.67389817e-04, -5.01663420e-05, -3.04096510e-04, -1.31932109e-05, -9.56406702e-05, -2.80905882e-06, -2.48415893e-05, -6.27191223e-07, -4.91383280e-06, 4.58089747e-11, 4.28321809e-11, -5.72124423e-05, -3.30932314e-04, -6.88009846e-05, -3.57862960e-04, -2.40500357e-04, -5.06995686e-04, -1.99577030e-04, -3.94808584e-04, -9.66919958e-05, -2.07097516e-04, -3.11574156e-05, -9.95539852e-05, -9.15379552e-06, -3.66407851e-05, -1.78255602e-06, -6.72978363e-06, 4.58208069e-11, 4.28324912e-11, -2.97310368e-05, -1.22504437e-04, -1.86365043e-04, -4.85280646e-05, -2.58926033e-04, -6.60756245e-05, -2.02863758e-04, -5.24917119e-05, -1.08681687e-04, -2.84587255e-05, -1.07535489e-05, -4.20765425e-05, -1.46032402e-06, -8.18614657e-06, 4.58502563e-11, 4.28320080e-11, 4.58440184e-11, 4.28328028e-11, -9.73087208e-05, -2.45000602e-05, -1.20463792e-04, -2.91217410e-05, -1.21712136e-04, -2.98036457e-05, -2.57400589e-05, -8.57903535e-05, -9.52057937e-06, -3.44914029e-05, -1.50440034e-06, -8.20235689e-06, 4.58531944e-11, 4.28297984e-11, 4.58702967e-11, 4.28319830e-11, 4.58587716e-11, 4.28324460e-11, -4.40243341e-05, -1.14714017e-05, -1.36961922e-05, -4.38240279e-05, -1.02518717e-05, -3.45548774e-05, -2.87931673e-06, -1.41724943e-05, 4.58139033e-11, 4.28203285e-11, 4.58249963e-11, 4.28241322e-11, 4.58462174e-11, 4.28287138e-11, 4.58575201e-11, 4.28310390e-11, 4.58525744e-11, 4.28316553e-11, -7.56927170e-03, -1.04881643e-02, -5.45892586e-03, -7.56583450e-03, -3.99030622e-03, -1.27504162e-03, -1.06387348e-03, -6.72239067e-04, -3.26744019e-04, -1.93891198e-04, -1.39957136e-04, -8.16768148e-05, -9.44612277e-05, -1.28420604e-04, -5.88934477e-05, -8.26371550e-05, -2.38881927e-05, -3.26389941e-05, -4.62137033e-03, -6.66522045e-03, -1.48154191e-03, -5.21111661e-03, -7.87758300e-04, -2.65461843e-03, -3.27728565e-04, -1.12411815e-03, -3.23367097e-04, -4.92302267e-04, -1.95201134e-04, -2.76206049e-04, -1.21906686e-04, -7.35560659e-05, -5.01223594e-05, -6.98557503e-05, -9.99327312e-06, -2.75091693e-05, -5.72222094e-04, -2.77456118e-03, -3.13518250e-04, -1.77176683e-03, -7.61323710e-04, -1.29315254e-03, -5.58790610e-04, -8.99783405e-04, -3.89221517e-04, -3.44682156e-04, -2.00043032e-04, -1.75655038e-04, -3.07469004e-05, -1.20425867e-04, -7.82232372e-06, -3.83321824e-05, -1.73040395e-06, -8.30768907e-06, -8.97009706e-04, -7.95308067e-04, -7.72942201e-04, -6.64622852e-04, -7.42298652e-04, -6.00381887e-04, -5.11189120e-04, -4.20286907e-04, -8.85628150e-05, -3.67567148e-04, -2.66221834e-05, -1.35376923e-04, -4.85060459e-06, -3.70044656e-05, -1.20793476e-06, -8.28233466e-06, -2.35255026e-07, -1.51156249e-06, -9.08751073e-05, -4.66576642e-04, -1.82666051e-04, -1.87883988e-04, -1.75414962e-04, -1.74329121e-04, -1.19297022e-04, -1.19751754e-04, -3.78127341e-05, -4.42654223e-05, -4.25182796e-06, -3.17845210e-05, -9.61299836e-07, -8.49692127e-06, -2.25206611e-07, -1.60893636e-06, 4.58654742e-11, 4.28344289e-11, -4.15491323e-05, -4.80512159e-05, -6.34102149e-05, -5.34665290e-05, -1.03718307e-04, -7.44474985e-05, -4.83383960e-05, -1.54158405e-04, -2.31134176e-05, -8.23450408e-05, -7.89078614e-06, -3.64410784e-05, -5.28839856e-06, -4.46766332e-06, -9.47163470e-07, -7.61192047e-07, 4.58752657e-11, 4.28344566e-11, -2.59543673e-05, -1.96046044e-05, -4.22918627e-05, -6.12412039e-05, -5.58677379e-05, -7.93557997e-05, -4.24982198e-05, -6.56971993e-05, -2.29063355e-05, -3.67787344e-05, -4.64091663e-06, -1.67442277e-05, -8.94647816e-07, -3.33706257e-06, 4.58958372e-11, 4.28341172e-11, 4.58878783e-11, 4.28343524e-11, -2.19812547e-05, -3.13658725e-05, -2.65762078e-05, -3.82980806e-05, -2.68677324e-05, -3.94522045e-05, -1.07707745e-05, -3.28780156e-05, -4.26597174e-06, -1.38079481e-05, -9.69274577e-07, -3.77731927e-06, 4.59082653e-11, 4.28323991e-11, 4.59069874e-11, 4.28337033e-11, 4.58962090e-11, 4.28338699e-11, -1.13448310e-05, -1.54767819e-05, -5.72734283e-06, -1.61577092e-05, -4.61251885e-06, -1.33766616e-05, -1.80222519e-06, -6.16037897e-06, 4.59079248e-11, 4.28258738e-11, 4.59047168e-11, 4.28281310e-11, 4.59017174e-11, 4.28311733e-11, 4.58991077e-11, 4.28327561e-11, 4.58874541e-11, 4.28329057e-11, -3.68863107e-03, -4.60429023e-03, -2.73386666e-03, -3.33510012e-03, -1.87735100e-03, -1.07504489e-03, -7.01995844e-04, -4.51242406e-04, -2.52415162e-04, -1.67165843e-04, -1.06789371e-04, -7.45651377e-05, -5.99075182e-05, -6.08000360e-05, -3.36497499e-05, -3.92770971e-05, -1.29198012e-05, -1.48695011e-05, -2.22587732e-03, -3.08365022e-03, -1.16199292e-03, -2.37090880e-03, -6.75507423e-04, -1.25859313e-03, -3.09104577e-04, -5.86841674e-04, -1.85608669e-04, -2.67871333e-04, -1.04752843e-04, -1.36182978e-04, -5.99629334e-05, -5.29321110e-05, -2.74538513e-05, -3.27463183e-05, -7.70356037e-06, -1.21036438e-05, -2.55019687e-04, -1.16322560e-03, -1.52061587e-04, -7.68876919e-04, -1.70687697e-04, -6.86012971e-04, -1.16133979e-04, -4.61777077e-04, -7.55931519e-05, -2.67164878e-04, -3.95906503e-05, -1.38443648e-04, -1.08387230e-05, -4.89193568e-05, -3.58920913e-06, -1.68053890e-05, -9.35163546e-07, -4.32896969e-06, -1.57175587e-04, -5.78139287e-04, -1.34264054e-04, -4.88420068e-04, -1.27285712e-04, -4.50048736e-04, -8.74206525e-05, -3.10710870e-04, -2.33995885e-05, -1.24800179e-04, -7.84953685e-06, -4.61405136e-05, -1.91285046e-06, -1.31099461e-05, -5.28519156e-07, -3.58026840e-06, -1.14570849e-07, -7.34880512e-07, -2.72108844e-05, -1.56487079e-04, -3.94394534e-05, -1.55246585e-04, -3.87890308e-05, -1.48711256e-04, -2.64142155e-05, -1.03544542e-04, -9.23806891e-06, -4.02509430e-05, -2.01236099e-06, -1.30846623e-05, -5.36469721e-07, -3.60154119e-06, -1.19948468e-07, -7.81323173e-07, 4.58698595e-11, 4.28344246e-11, -1.11090961e-05, -4.46953812e-05, -3.29846681e-05, -4.87815614e-05, -4.51883093e-05, -5.61624187e-05, -2.71750177e-05, -6.80835595e-05, -1.32821411e-05, -3.90186860e-05, -4.94862394e-06, -1.73789092e-05, -2.33497107e-06, -4.03318896e-06, -4.60302316e-07, -6.29773115e-07, 4.58787065e-11, 4.28344339e-11, -1.52441778e-05, -1.83745483e-05, -2.35865613e-05, -3.08330283e-05, -2.90517288e-05, -3.76321672e-05, -2.16384504e-05, -3.43002262e-05, -1.17821094e-05, -2.04719124e-05, -3.68852688e-06, -9.46992449e-06, -8.18112876e-07, -2.01451918e-06, 4.58989297e-11, 4.28340720e-11, 4.58935244e-11, 4.28343636e-11, -1.22606233e-05, -1.53043598e-05, -1.44678364e-05, -1.87896964e-05, -1.46429334e-05, -1.98253862e-05, -8.37373310e-06, -1.64037626e-05, -3.47257770e-06, -7.44132187e-06, -9.52063685e-07, -2.44008758e-06, 4.59087038e-11, 4.28324389e-11, 4.59086554e-11, 4.28337063e-11, 4.58998515e-11, 4.28338994e-11, -5.72340528e-06, -6.83030670e-06, -4.45124565e-06, -7.28426447e-06, -3.77581327e-06, -6.48115302e-06, -1.75333673e-06, -3.55807255e-06, 4.59068427e-11, 4.28265489e-11, 4.59062168e-11, 4.28285201e-11, 4.59073333e-11, 4.28313690e-11, 4.59036128e-11, 4.28328463e-11, 4.58944105e-11, 4.28331338e-11])

    ref_eigenvalue = 1.001491097862841
    s = solver.SolverSlepc(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
    s.solve()
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)
    npt.assert_almost_equal(s.getEigenVectors()[0], ref_eigenvector,
                            decimal=4)

    s.solve(solver="arnoldi")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)

    s.solve(inner_solver="ibcgs")
    assert ref_eigenvalue == pytest.approx(s.getEigenValues()[0], abs=1e-6)


# def test_solverPI_3d_refine_lu(macrolib_3d_refine):
#     solver.init_slepc()
#     set_log_level(log_level.debug)
#     macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
#     s = solver.SolverPowerIt(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
#     s.solve(inner_solver="SparseLU")

# def test_solverPI_3d_refine_BiCGSTAB(macrolib_3d_refine):
#     solver.init_slepc()
#     set_log_level(log_level.debug)
#     macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
#     s = solver.SolverPowerIt(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
#     s.solve(inner_solver="BiCGSTAB")

# def test_solverPI_3d_refine_BiCGSTAB_lu(macrolib_3d_refine):
#     solver.init_slepc()
#     set_log_level(log_level.debug)
#     macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
#     s = solver.SolverPowerIt(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
#     s.solve(inner_solver="BiCGSTAB", inner_precond="IncompleteLUT")

# def test_solverPI_3d_refine_GMRES(macrolib_3d_refine):
#     solver.init_slepc()
#     set_log_level(log_level.debug)
#     macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
#     s = solver.SolverPowerIt(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
#     s.solve(inner_solver="GMRES")

# @pytest.mark.integtest    
def test_solverSlepc_3d_refine(macrolib_3d_refine):
    solver.init_slepc()
    set_log_level(log_level.debug)
    macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
    s = solver.SolverSlepc(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
    s.solve(outer_max_iter=10000, inner_max_iter=200, tol=1e-6)

# # @pytest.mark.integtest
# def test_solverSlepc_3d_refine_arnoldi(macrolib_3d_refine):
#     solver.init_slepc()
#     set_log_level(log_level.debug)
#     macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
#     s = solver.SolverSlepc(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
#     s.solve(solver="arnoldi", outer_max_iter=10000, inner_max_iter=200, tol=1e-6)

# # @pytest.mark.integtest    
# def test_solverSlepc_3d_refine_ibcgs(macrolib_3d_refine):
#     solver.init_slepc()
#     set_log_level(log_level.debug)
#     macrolib, x_mesh, y_mesh, z_mesh = macrolib_3d_refine
#     s = solver.SolverSlepc(x_mesh, y_mesh, z_mesh, macrolib, 1., 0., 1., 0., 0., 0.)
#     s.solve(inner_solver="ibcgs", outer_max_iter=10000, inner_max_iter=200, tol=1e-6)